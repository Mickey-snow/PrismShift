
source.cpp,30
signed main(void)main14,231

sphere.hpp,601
#define SPHERE_HSPHERE_H2,17
class Sphere : public Visible{Sphere11,153
  Sphere(const Point3& _center, const double& r) : center(_center), radius(r),material(nullptr) Sphere13,192
  Sphere(const Point3& _center, const double& r, Material* _material) : center(_center), radius(Sphere14,291
  virtual Color Ray_Color(const Ray& r, const Hit_record& rec) const override{Ray_Color16,415
  virtual Hit_record Ray_Hit(const Ray& r, const Interval<double>& time) const override{Ray_Hit23,827
  Point3 center;center55,1765
  double radius;radius56,1782
  Material* material;material57,1799

renderer.cpp,741
std::vector<Point3> Rand_Pixel_Samples(const Camera::View_Info& view, const int& row, const int&Rand_Pixel_Samples8,114
int _finished_render_sub_process_count,_total_render_sub_process_count;_finished_render_sub_process_count23,812
int _finished_render_sub_process_count,_total_render_sub_process_count;_total_render_sub_process_count23,812
void Write_Color(Mat& canvas, const int& i,const int &j, Color pixel_color){Write_Color24,884
Mat Renderer::__Renderer_facade::Render() const{Render30,1216
void _render_sub_process(Mat canvas, Interval<int> row, Interval<int> col, const Camera::View_In_render_sub_process49,1997
Color Renderer::__Renderer_facade::Ray_Color(const Ray& r, int current_recur_depth) const{Ray_Color68,2758

CMakeLists.txt,179
project(DisplayImage)DisplayImage2,36
add_library(common STATIC ${COMMON_LIB_SOURCES})common5,104
add_library(lib STATIClib7,159
add_executable(main source.cpp)main15,293

camera.hpp,1203
#define CAMERA_HCAMERA_H2,17
class Camera{Camera10,124
  Camera(const Point3& center_position = Point3(0,0,0),Camera12,146
  void Set_Position(const Vector3& position){Set_Position29,764
  void Adjust_Position(const Vector3& translate){Adjust_Position32,844
  Vector3 Position(void) const{ return camera_center; }Position35,930
  void Set_Width(const int& _width){Set_Width37,987
  struct View_Info{View_Info43,1168
    Vector3 viewport_u, viewport_v;viewport_u44,1188
    Vector3 viewport_u, viewport_v;viewport_v44,1188
    Vector3 pixel_delta_u, pixel_delta_v;pixel_delta_u45,1224
    Vector3 pixel_delta_u, pixel_delta_v;pixel_delta_v45,1224
    Point3 viewport_upper_left;viewport_upper_left46,1266
    Point3 pixel00_loc;pixel00_loc47,1298
  double aspect_ratio;aspect_ratio54,1410
  int image_width, image_height;image_width55,1433
  int image_width, image_height;image_height55,1433
  double focal_length;focal_length56,1466
  double viewpoint_height, viewpoint_width;viewpoint_height57,1489
  double viewpoint_height, viewpoint_width;viewpoint_width57,1489
  Point3 camera_center;camera_center58,1533
  int samples_per_frame;samples_per_frame60,1558

material.hpp,1003
#define MATERIAL_HMATERIAL_H2,19
class Material{Material8,116
class Lambertian : public Material{Lambertian15,238
  Lambertian(const Color& col) : attenuation(col) {}Lambertian17,282
  virtual Color Ray_Color(const Ray& r,const Hit_record& rec) const override{Ray_Color19,336
  Color attenuation;attenuation25,647
class Metal : public Material{Metal28,672
  Metal(const Color& col, const double& f=0) : attenuation(col),fuzz(fabs(f)<1?f:1) {}Metal30,711
  virtual Color Ray_Color(const Ray& r,const Hit_record& rec) const override{Ray_Color32,799
  Color attenuation;attenuation38,1198
  double fuzz;fuzz39,1219
class Dielectric : public Material{Dielectric42,1238
  Dielectric(const double& index_of_refraction) : eta(index_of_refraction) {}Dielectric44,1282
  virtual Color Ray_Color(const Ray& r, const Hit_record& rec) const override{Ray_Color46,1361
  double eta;eta64,2239
  static double Reflectance(const double& cosine, const double& ref_idx){Reflectance66,2254

objects.hpp,606
#define OBJECTS_HOBJECTS_H2,18
class Hit_record{Hit_record8,83
  bool hits;hits10,109
  int hit_counts;hit_counts11,122
  std::shared_ptr<Visible> hitted_obj;hitted_obj12,140
  Point3 position;	        // hit positionposition14,182
  Vector3 normal;		// outward normal vectornormal15,225
  double time;			// timetime16,269
  bool front_face;		// is this the front face of the hitted obj?front_face17,294
  Hit_record():hits(false),hit_counts(0) {}Hit_record19,360
  void Set_Face_Normal(const Ray& r, const Vector3& outward_normal){Set_Face_Normal21,405
class Visible{Visible28,600

make.sh,0

TAGS,0

renderer.hpp,791
#define RENDERER_PANEL_HRENDERER_PANEL_H2,25
class Renderer{Renderer10,146
  class __Renderer_facade{__Renderer_facade12,171
    __Renderer_facade(){}__Renderer_facade14,208
    void Set_Camera(Camera* cam_){ cam=cam_; }Set_Camera17,271
    void Set_World(Visible* world_){ world=world_; }Set_World18,318
    void Set_Samples_per_pixel(const int& samples){ samples_per_pixel = samples; }Set_Samples_per_pixel23,460
    void Set_Max_recurrent_depth(const int& max_recur){ max_recurrent_depth = max_recur; }Set_Max_recurrent_depth24,543
    Camera* cam;cam27,650
    Visible* world;world28,667
    int samples_per_pixel = 50;samples_per_pixel31,707
    int max_recurrent_depth = 110;max_recurrent_depth32,739
  static __Renderer_facade* Instance(void){Instance39,850

common/constant.hpp,172
#define CONSTANT_HCONSTANT_H2,19
constexpr double infinity = std::numeric_limits<double>::infinity();infinity7,70
constexpr double pi = 3.1415926535897932385;pi8,139

common/color.hpp,63
#define COLOR_HCOLOR_H2,16
using Color = Vector3;Color7,76

common/vector3.hpp,117
#define VEC3_HVEC3_H2,15
class Vector3{Vector36,51
  double e[3];e40,888
using Point3 = Vector3;Point342,906

common/color.cpp,226
inline double Linear2Gamma(const double& linear_component){Linear2Gamma7,82
Color Format_Color(const Color& pixel_color){Format_Color11,183
void Write_Color(std::ostream& out, const Color& pixel_color){Write_Color27,600

common/vector3.cpp,2015
Vector3::Vector3():e{0,0,0} {}Vector38,99
Vector3::Vector3(const double& e0,const double& e1,const double& e2):e{e0,e1,e2} {}Vector39,130
double Vector3::x() const{ return e[0]; }x12,277
double Vector3::y() const{ return e[1]; }y13,319
double Vector3::z() const{ return e[2]; }z14,361
bool Vector3::Near_Zero() const{Near_Zero16,404
Vector3 Vector3::operator - () const{operator -21,537
Vector3 Vector3::operator - (const Vector3& v) const{operator -24,614
Vector3& Vector3::operator -= (const Vector3& v){ return *this = *this-v; }operator -=27,719
Vector3 Vector3::operator + (const Vector3& v) const{operator +28,795
Vector3& Vector3::operator += (const Vector3& v){ return *this = *this + v; }operator +=31,900
Vector3 operator * (const Vector3& e, const double& t){operator *32,978
Vector3 operator * (const double& t, const Vector3& e){ return e*t; }operator *35,1078
Vector3& Vector3::operator *= (const double& t){ return *this = *this * t; }operator *=36,1148
Vector3 Vector3::operator * (const Vector3& v)const {operator *37,1225
Vector3& Vector3::operator *= (const Vector3& v){ return *this = *this * v; }operator *=40,1332
Vector3 Vector3::operator / (const double& t)const{operator /42,1411
Vector3& Vector3::operator /= (const double& t){ return *this = *this / t; }operator /=45,1507
double Vector3::operator [](const int& i) const{ return e[i]; }operator []47,1585
double& Vector3::operator [](const int& i){ return e[i]; }operator []48,1649
double Vector3::Length() const{ return sqrt(this->Length_squared()); }Length50,1709
double Vector3::Length_squared() const{Length_squared51,1780
Vector3 Vector3::Unit() const{Unit55,1867
std::ostream& operator <<(std::ostream& out, const Vector3& v){operator <<60,1931
double Dot(const Vector3 &u, const Vector3 &v) {Dot65,2051
Vector3 Cross(const Vector3 &u, const Vector3 &v) {Cross71,2161
Vector3 Unit_vector(const Vector3& v) {Unit_vector77,2321
Vector3 Vector3::Random_Unit(){Random_Unit81,2389

common/random.cpp,136
double random_uniform_01(void){random_uniform_016,57
double random_double(const double& min, const double& max){random_double12,239

common/common.hpp,98
#define COMMON_HCOMMON_H2,17
inline double Degree2Rad(const double& degrees){Degree2Rad18,272

common/ray.hpp,361
#define RAY_HRAY_H2,14
class Ray{Ray6,53
  Ray(){}Ray8,72
  Ray(const Point3& origin_, const Vector3& direction_) : origin(origin_), direction(direction_)Ray9,82
  Point3 Origin() const{ return origin; }Origin11,183
  Vector3 Direction() const{ return direction; }Direction12,225
  Point3 origin;origin20,592
  Vector3 direction;direction21,609

common/ray.cpp,361
Point3 Ray::At(const double& time) const{At6,60
Vector3 Ray::Scatter_Direction(const Vector3& normal){Scatter_Direction10,139
Vector3 Ray::Reflect_Direction(const Vector3& in_direction, const Vector3& normal){Reflect_Direction15,305
Vector3 Ray::Refract_Direction(const Vector3& in_direction, const Vector3& normal, const double&Refract_Direction20,498

common/random.hpp,31
#define RANDOM_HRANDOM_H2,17

common/interval.hpp,1072
#define INTERVAL_HINTERVAL_H2,19
class Interval{Interval7,78
  const T Positive_Inf = std::numeric_limits<T>::max();Positive_Inf9,103
  const T Negative_Inf = std::numeric_limits<T>::min();Negative_Inf10,159
  T begin,end;begin13,226
  T begin,end;end13,226
  Interval():begin(Positive_Inf),end(Negative_Inf) {} // default interval is emptyInterval15,244
  Interval(const T& _min, const T& _max) : begin(_min), end(_max) {}Interval16,327
  bool isEmpty(void) const{ return begin>end; }isEmpty19,422
  bool In(const Interval& a) const{ return a.begin<=begin and end<=a.end; }In20,470
  bool Contains(const T& x) const{Contains22,549
  bool Surrounds(const T& x) const{Surrounds25,620
  T Clamp(const T& x) const{Clamp29,691
  friend std::ostream& operator << (std::ostream& out, const Interval<T>& seq){operator <<34,795
  static Interval<T> Empty(){ return Interval<T>(std::numeric_limits<T>::max(), std::numeric_limEmpty38,931
  static Interval<T> Universe(){ return Interval<T>(std::numeric_limits<T>::min(), std::numeric_Universe39,1045

common/mat.hpp,25
#define MAT_HMAT_H2,14

camera.cpp,83
Camera::View_Info Camera::Get_Initialize_View() const{Get_Initialize_View48,1394

scene.hpp,656
#define SCENE_HSCENE_H2,16
class Scene: public Visible{Scene9,92
  Scene(){}Scene11,129
  Scene(std::shared_ptr<Visible> obj) : objects{obj} {}Scene12,141
  Scene(std::initializer_list<std::shared_ptr<Visible>>&& li):objects{std::move(li)} {}Scene13,197
  void Clear(){ objects.clear(); }Clear16,310
  void Add(std::shared_ptr<Visible> obj){ objects.push_back(obj); }Add17,345
  virtual Hit_record Ray_Hit(const Ray& r, const Interval<double>& time) const override{Ray_Hit21,574
  virtual Color Ray_Color(const Ray& r, const Hit_record& rec) const override{Ray_Color36,962
  std::vector<std::shared_ptr<Visible>> objects;objects41,1104
